// Generated by gencpp from file turtlesim/RemoveCircleResponse.msg
// DO NOT EDIT!


#ifndef TURTLESIM_MESSAGE_REMOVECIRCLERESPONSE_H
#define TURTLESIM_MESSAGE_REMOVECIRCLERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <turtlesim/Circle.h>

namespace turtlesim
{
template <class ContainerAllocator>
struct RemoveCircleResponse_
{
  typedef RemoveCircleResponse_<ContainerAllocator> Type;

  RemoveCircleResponse_()
    : circles()  {
    }
  RemoveCircleResponse_(const ContainerAllocator& _alloc)
    : circles(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::turtlesim::Circle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::turtlesim::Circle_<ContainerAllocator> >::other >  _circles_type;
  _circles_type circles;




  typedef boost::shared_ptr< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RemoveCircleResponse_

typedef ::turtlesim::RemoveCircleResponse_<std::allocator<void> > RemoveCircleResponse;

typedef boost::shared_ptr< ::turtlesim::RemoveCircleResponse > RemoveCircleResponsePtr;
typedef boost::shared_ptr< ::turtlesim::RemoveCircleResponse const> RemoveCircleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlesim::RemoveCircleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace turtlesim

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'turtlesim': ['/home/alessio/workspaces/src/turtlesim/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b1b1441bc75b4f59372da8dedbed3bb";
  }

  static const char* value(const ::turtlesim::RemoveCircleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b1b1441bc75b4f5ULL;
  static const uint64_t static_value2 = 0x9372da8dedbed3bbULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlesim/RemoveCircleResponse";
  }

  static const char* value(const ::turtlesim::RemoveCircleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Circle[] circles\n\
\n\
\n\
================================================================================\n\
MSG: turtlesim/Circle\n\
uint8 id\n\
float32 x\n\
float32 y\n\
";
  }

  static const char* value(const ::turtlesim::RemoveCircleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.circles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RemoveCircleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlesim::RemoveCircleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlesim::RemoveCircleResponse_<ContainerAllocator>& v)
  {
    s << indent << "circles[]" << std::endl;
    for (size_t i = 0; i < v.circles.size(); ++i)
    {
      s << indent << "  circles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::turtlesim::Circle_<ContainerAllocator> >::stream(s, indent + "    ", v.circles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLESIM_MESSAGE_REMOVECIRCLERESPONSE_H
